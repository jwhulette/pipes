{
    "summary": {
        "code": 95.9,
        "complexity": 79.6,
        "architecture": 76.2,
        "style": 95.2,
        "security issues": 0,
        "fixed issues": 0
    },
    "Code": [
        {
            "title": "Parameter type hint",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\TypeHints\\ParameterTypeHintSniff",
            "file": "src/Extractors/XmlExtractor.php",
            "line": 68,
            "message": "Method \\Jwhulette\\Pipes\\Extractors\\XmlExtractor::arrayFlatten() does not have @param annotation for its traversable parameter $array."
        },
        {
            "title": "Parameter type hint",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\TypeHints\\ParameterTypeHintSniff",
            "file": "src/Extractors/XmlExtractor.php",
            "line": 86,
            "message": "Method \\Jwhulette\\Pipes\\Extractors\\XmlExtractor::loopXml() does not have @param annotation for its traversable parameter $record."
        },
        {
            "title": "Parameter type hint",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\TypeHints\\ParameterTypeHintSniff",
            "file": "src/Frame.php",
            "line": 24,
            "message": "@param annotation of method \\Jwhulette\\Pipes\\Frame::setData() does not specify type hint for items of its traversable parameter $data."
        },
        {
            "title": "Parameter type hint",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\TypeHints\\ParameterTypeHintSniff",
            "file": "src/Frame.php",
            "line": 45,
            "message": "@param annotation of method \\Jwhulette\\Pipes\\Frame::setHeader() does not specify type hint for items of its traversable parameter $header."
        },
        {
            "title": "Parameter type hint",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\TypeHints\\ParameterTypeHintSniff",
            "file": "src/Frame.php",
            "line": 59,
            "message": "@param annotation of method \\Jwhulette\\Pipes\\Frame::setAttribute() does not specify type hint for items of its traversable parameter $attribute."
        },
        {
            "title": "Parameter type hint",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\TypeHints\\ParameterTypeHintSniff",
            "file": "src/Loaders/SqlLoader.php",
            "line": 48,
            "message": "Method \\Jwhulette\\Pipes\\Loaders\\SqlLoader::setSqlColumnNames() does not have @param annotation for its traversable parameter $columns."
        },
        {
            "title": "Parameter type hint",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\TypeHints\\ParameterTypeHintSniff",
            "file": "src/Processor.php",
            "line": 29,
            "message": "Method \\Jwhulette\\Pipes\\Processor::__construct() has useless @param annotation for parameter $extractor."
        },
        {
            "title": "Parameter type hint",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\TypeHints\\ParameterTypeHintSniff",
            "file": "src/Processor.php",
            "line": 31,
            "message": "Method \\Jwhulette\\Pipes\\Processor::__construct() has useless @param annotation for parameter $loader."
        },
        {
            "title": "Parameter type hint",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\TypeHints\\ParameterTypeHintSniff",
            "file": "src/iterable.php",
            "line": 60,
            "message": "Method \\Jwhulette\\Pipes\\Processor::buildTransformerPipeline() has useless @param annotation for parameter $pipelineBuilder."
        },
        {
            "title": "Property type hint",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\TypeHints\\PropertyTypeHintSniff",
            "file": "src/Frame.php",
            "line": 18,
            "message": "@var annotation of property \\Jwhulette\\Pipes\\Frame::$attributes does not specify type hint for its items."
        },
        {
            "title": "Property type hint",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\TypeHints\\PropertyTypeHintSniff",
            "file": "src/Loaders/SqlLoader.php",
            "line": 25,
            "message": "@var annotation of property \\Jwhulette\\Pipes\\Loaders\\SqlLoader::$insert does not specify type hint for its items."
        },
        {
            "title": "Return type hint",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\TypeHints\\ReturnTypeHintSniff",
            "file": "src/Extractors/FixedWithExtractor.php",
            "line": 115,
            "message": "Method \\Jwhulette\\Pipes\\Extractors\\FixedWithExtractor::makeFrame() does not have @return annotation for its traversable return value."
        },
        {
            "title": "Return type hint",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\TypeHints\\ReturnTypeHintSniff",
            "file": "src/Extractors/FixedWithExtractor.php",
            "line": 126,
            "message": "Method \\Jwhulette\\Pipes\\Extractors\\FixedWithExtractor::columnSizes() does not have @return annotation for its traversable return value."
        },
        {
            "title": "Return type hint",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\TypeHints\\ReturnTypeHintSniff",
            "file": "src/Extractors/FixedWithExtractor.php",
            "line": 146,
            "message": "Method \\Jwhulette\\Pipes\\Extractors\\FixedWithExtractor::allColumnsEqual() does not have @return annotation for its traversable return value."
        },
        {
            "title": "Return type hint",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\TypeHints\\ReturnTypeHintSniff",
            "file": "src/Extractors/XlsxExtractor.php",
            "line": 115,
            "message": "Method \\Jwhulette\\Pipes\\Extractors\\XlsxExtractor::makeRow() does not have @return annotation for its traversable return value."
        },
        {
            "title": "Return type hint",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\TypeHints\\ReturnTypeHintSniff",
            "file": "src/Frame.php",
            "line": 67,
            "message": "Method \\Jwhulette\\Pipes\\Frame::getAllAttributes() does not have @return annotation for its traversable return value."
        },
        {
            "title": "Static closure",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\Functions\\StaticClosureSniff",
            "file": "src/Transformers/ConditionalTransformer.php",
            "line": 41,
            "message": "Closure not using \"$this\" should be declared static."
        }
    ],
    "Complexity": [
        {
            "title": "Having `classes` with more than 5 cyclomatic complexity is prohibited - Consider refactoring",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\CyclomaticComplexityIsHigh",
            "file": "src/Extractors/CsvExtractor.php",
            "message": "6 cyclomatic complexity"
        },
        {
            "title": "Having `classes` with more than 5 cyclomatic complexity is prohibited - Consider refactoring",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\CyclomaticComplexityIsHigh",
            "file": "src/Extractors/FixedWithExtractor.php",
            "message": "9 cyclomatic complexity"
        },
        {
            "title": "Having `classes` with more than 5 cyclomatic complexity is prohibited - Consider refactoring",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\CyclomaticComplexityIsHigh",
            "file": "src/Extractors/XlsxExtractor.php",
            "message": "8 cyclomatic complexity"
        },
        {
            "title": "Having `classes` with more than 5 cyclomatic complexity is prohibited - Consider refactoring",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\CyclomaticComplexityIsHigh",
            "file": "src/Extractors/XmlExtractor.php",
            "message": "9 cyclomatic complexity"
        },
        {
            "title": "Having `classes` with more than 5 cyclomatic complexity is prohibited - Consider refactoring",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\CyclomaticComplexityIsHigh",
            "file": "src/Loaders/SqlLoader.php",
            "message": "6 cyclomatic complexity"
        },
        {
            "title": "Having `classes` with more than 5 cyclomatic complexity is prohibited - Consider refactoring",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\CyclomaticComplexityIsHigh",
            "file": "src/Transformers/CaseTransformer.php",
            "message": "6 cyclomatic complexity"
        },
        {
            "title": "Having `classes` with more than 5 cyclomatic complexity is prohibited - Consider refactoring",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\CyclomaticComplexityIsHigh",
            "file": "src/Transformers/DateTimeTransformer.php",
            "message": "6 cyclomatic complexity"
        },
        {
            "title": "Having `classes` with more than 5 cyclomatic complexity is prohibited - Consider refactoring",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\CyclomaticComplexityIsHigh",
            "file": "src/Transformers/ZipcodeTransformer.php",
            "message": "9 cyclomatic complexity"
        }
    ],
    "Architecture": [
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/DataTransferObjects/CaseColumn.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/DataTransferObjects/ConditionalColumn.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/DataTransferObjects/DateTimeColumn.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/DataTransferObjects/PhoneColumn.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/DataTransferObjects/TrimColumn.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/DataTransferObjects/ZipcodeColumn.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/EtlPipe.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/Exceptions/PipesException.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/Exceptions/PipesInvalidArgumentException.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/Exceptions/PipesSqlException.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/Extractors/CsvExtractor.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/Extractors/FixedWithExtractor.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/Extractors/SqlExtractor.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/Extractors/XlsxExtractor.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/Extractors/XmlExtractor.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/Frame.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/Loaders/CsvLoader.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/Loaders/SqlLoader.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/PipesServiceProvider.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/Processor.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/Transformers/CaseTransformer.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/Transformers/ConditionalTransformer.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/Transformers/DateTimeTransformer.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/Transformers/PhoneTransformer.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/Transformers/TrimTransformer.php"
        },
        {
            "title": "Normal classes are forbidden. Classes must be final or abstract",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenNormalClasses",
            "file": "src/Transformers/ZipcodeTransformer.php"
        },
        {
            "title": "Superfluous interface naming",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\Classes\\SuperfluousInterfaceNamingSniff",
            "file": "src/Contracts/ExtractorInterface.php",
            "line": 9,
            "message": "Superfluous suffix \"Interface\"."
        },
        {
            "title": "Superfluous interface naming",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\Classes\\SuperfluousInterfaceNamingSniff",
            "file": "src/Contracts/LoaderInterface.php",
            "line": 9,
            "message": "Superfluous suffix \"Interface\"."
        },
        {
            "title": "Superfluous interface naming",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\Classes\\SuperfluousInterfaceNamingSniff",
            "file": "src/Contracts/TransformerInterface.php",
            "line": 9,
            "message": "Superfluous suffix \"Interface\"."
        },
        {
            "title": "Superfluous exception naming",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\Classes\\SuperfluousExceptionNamingSniff",
            "file": "src/Exceptions/PipesException.php",
            "line": 9,
            "message": "Superfluous suffix \"Exception\"."
        },
        {
            "title": "Superfluous exception naming",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\Classes\\SuperfluousExceptionNamingSniff",
            "file": "src/Exceptions/PipesInvalidArgumentException.php",
            "line": 9,
            "message": "Superfluous suffix \"Exception\"."
        },
        {
            "title": "Superfluous exception naming",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\Classes\\SuperfluousExceptionNamingSniff",
            "file": "src/Exceptions/PipesSqlException.php",
            "line": 9,
            "message": "Superfluous suffix \"Exception\"."
        },
        {
            "title": "Function length",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\Functions\\FunctionLengthSniff",
            "file": "src/Extractors/CsvExtractor.php",
            "line": 63,
            "message": "Your function is too long. Currently using 25 lines. Can be up to 20 lines."
        },
        {
            "title": "Function length",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\Functions\\FunctionLengthSniff",
            "file": "src/Extractors/FixedWithExtractor.php",
            "line": 68,
            "message": "Your function is too long. Currently using 30 lines. Can be up to 20 lines."
        },
        {
            "title": "Function length",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\Functions\\FunctionLengthSniff",
            "file": "src/Extractors/XlsxExtractor.php",
            "line": 54,
            "message": "Your function is too long. Currently using 21 lines. Can be up to 20 lines."
        },
        {
            "title": "Function length",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\Functions\\FunctionLengthSniff",
            "file": "src/Transformers/TrimTransformer.php",
            "line": 50,
            "message": "Your function is too long. Currently using 23 lines. Can be up to 20 lines."
        },
        {
            "title": "The use of `traits` is prohibited",
            "insightClass": "NunoMaduro\\PhpInsights\\Domain\\Insights\\ForbiddenTraits",
            "file": "src/Traits/CsvOptions.php"
        }
    ],
    "Style": [
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "phpinsights.php",
            "line": 65,
            "message": "Line exceeds 80 characters; contains 82 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/DataTransferObjects/DateTimeColumn.php",
            "line": 17,
            "message": "Line exceeds 80 characters; contains 95 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/DataTransferObjects/ZipcodeColumn.php",
            "line": 17,
            "message": "Line exceeds 80 characters; contains 81 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Extractors/CsvExtractor.php",
            "line": 80,
            "message": "Line exceeds 80 characters; contains 94 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Extractors/CsvExtractor.php",
            "line": 82,
            "message": "Line exceeds 80 characters; contains 91 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Extractors/XmlExtractor.php",
            "line": 49,
            "message": "Line exceeds 80 characters; contains 96 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Extractors/XmlExtractor.php",
            "line": 86,
            "message": "Line exceeds 80 characters; contains 82 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Loaders/SqlLoader.php",
            "line": 53,
            "message": "Line exceeds 80 characters; contains 88 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Loaders/SqlLoader.php",
            "line": 79,
            "message": "Line exceeds 80 characters; contains 84 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Processor.php",
            "line": 63,
            "message": "Line exceeds maximum limit of 100 characters; contains 106 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Transformers/CaseTransformer.php",
            "line": 25,
            "message": "Line exceeds maximum limit of 100 characters; contains 103 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Transformers/CaseTransformer.php",
            "line": 43,
            "message": "Line exceeds 80 characters; contains 95 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Transformers/CaseTransformer.php",
            "line": 67,
            "message": "Line exceeds 80 characters; contains 84 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Transformers/ConditionalTransformer.php",
            "line": 25,
            "message": "Line exceeds 80 characters; contains 91 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Transformers/ConditionalTransformer.php",
            "line": 26,
            "message": "Line exceeds 80 characters; contains 86 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Transformers/ConditionalTransformer.php",
            "line": 45,
            "message": "Line exceeds 80 characters; contains 87 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Transformers/DateTimeTransformer.php",
            "line": 58,
            "message": "Line exceeds 80 characters; contains 91 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Transformers/DateTimeTransformer.php",
            "line": 65,
            "message": "Line exceeds 80 characters; contains 85 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Transformers/PhoneTransformer.php",
            "line": 26,
            "message": "Line exceeds 80 characters; contains 85 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Transformers/PhoneTransformer.php",
            "line": 28,
            "message": "Line exceeds 80 characters; contains 87 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Transformers/TrimTransformer.php",
            "line": 31,
            "message": "Line exceeds maximum limit of 100 characters; contains 107 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Transformers/TrimTransformer.php",
            "line": 33,
            "message": "Line exceeds 80 characters; contains 98 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Transformers/TrimTransformer.php",
            "line": 41,
            "message": "Line exceeds 80 characters; contains 89 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Transformers/TrimTransformer.php",
            "line": 43,
            "message": "Line exceeds 80 characters; contains 92 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Transformers/TrimTransformer.php",
            "line": 86,
            "message": "Line exceeds 80 characters; contains 89 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Transformers/TrimTransformer.php",
            "line": 89,
            "message": "Line exceeds 80 characters; contains 83 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Transformers/ZipcodeTransformer.php",
            "line": 27,
            "message": "Line exceeds maximum limit of 100 characters; contains 105 characters"
        },
        {
            "title": "Line length",
            "insightClass": "PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Files\\LineLengthSniff",
            "file": "src/Transformers/ZipcodeTransformer.php",
            "line": 75,
            "message": "Line exceeds 80 characters; contains 90 characters"
        },
        {
            "title": "Trailing array comma",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\Arrays\\TrailingArrayCommaSniff",
            "file": "phpinsights.php",
            "line": 66,
            "message": "Multi-line arrays must have a trailing comma after the last element."
        },
        {
            "title": "Doc comment spacing",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\Commenting\\DocCommentSpacingSniff",
            "file": "src/Extractors/XlsxExtractor.php",
            "line": 93,
            "message": "Expected 1 line between description and annotations, found 0."
        },
        {
            "title": "Doc comment spacing",
            "insightClass": "SlevomatCodingStandard\\Sniffs\\Commenting\\DocCommentSpacingSniff",
            "file": "src/Frame.php",
            "line": 59,
            "message": "Expected 1 line between description and annotations, found 0."
        },
        {
            "title": "Ordered class elements",
            "insightClass": "PhpCsFixer\\Fixer\\ClassNotation\\OrderedClassElementsFixer",
            "file": "src/Extractors/XlsxExtractor.php",
            "message": "@@ -91,2 +91,16 @@\n     /**\n+     * @param array<Cell> $cells\n+     */\n+    public function makeRow(array $cells): array\n+    {\n+        $array = [];\n+\n+        foreach ($cells as $cell) {\n+            $array[] = (string) $cell->getValue();\n+        }\n+\n+        return $array;\n+    }\n+\n+    /**\n      * The use of rewind is needed when using current.\n@@ -109,16 +123,2 @@\n         );\n-    }\n-\n-    /**\n-     * @param array<Cell> $cells\n-     */\n-    public function makeRow(array $cells): array\n-    {\n-        $array = [];\n-\n-        foreach ($cells as $cell) {\n-            $array[] = (string) $cell->getValue();\n-        }\n-\n-        return $array;\n     }",
            "diff": "@@ -91,2 +91,16 @@\n     /**\n+     * @param array<Cell> $cells\n+     */\n+    public function makeRow(array $cells): array\n+    {\n+        $array = [];\n+\n+        foreach ($cells as $cell) {\n+            $array[] = (string) $cell->getValue();\n+        }\n+\n+        return $array;\n+    }\n+\n+    /**\n      * The use of rewind is needed when using current.\n@@ -109,16 +123,2 @@\n         );\n-    }\n-\n-    /**\n-     * @param array<Cell> $cells\n-     */\n-    public function makeRow(array $cells): array\n-    {\n-        $array = [];\n-\n-        foreach ($cells as $cell) {\n-            $array[] = (string) $cell->getValue();\n-        }\n-\n-        return $array;\n     }"
        },
        {
            "title": "Ordered class elements",
            "insightClass": "PhpCsFixer\\Fixer\\ClassNotation\\OrderedClassElementsFixer",
            "file": "src/Transformers/CaseTransformer.php",
            "message": "@@ -24,15 +24,2 @@\n \n-    public function transformColumn(int|string $column, string $mode, string $encoding = 'utf-8'): self\n-    {\n-        $transformer = new CaseColumn(\n-            $column,\n-            $this->getMode($mode),\n-            $encoding,\n-        );\n-\n-        $this->transformers->push($transformer);\n-\n-        return $this;\n-    }\n-\n     public function __invoke(Frame $frame): Frame\n@@ -50,2 +37,15 @@\n         return $frame;\n+    }\n+\n+    public function transformColumn(int|string $column, string $mode, string $encoding = 'utf-8'): self\n+    {\n+        $transformer = new CaseColumn(\n+            $column,\n+            $this->getMode($mode),\n+            $encoding,\n+        );\n+\n+        $this->transformers->push($transformer);\n+\n+        return $this;\n     }",
            "diff": "@@ -24,15 +24,2 @@\n \n-    public function transformColumn(int|string $column, string $mode, string $encoding = 'utf-8'): self\n-    {\n-        $transformer = new CaseColumn(\n-            $column,\n-            $this->getMode($mode),\n-            $encoding,\n-        );\n-\n-        $this->transformers->push($transformer);\n-\n-        return $this;\n-    }\n-\n     public function __invoke(Frame $frame): Frame\n@@ -50,2 +37,15 @@\n         return $frame;\n+    }\n+\n+    public function transformColumn(int|string $column, string $mode, string $encoding = 'utf-8'): self\n+    {\n+        $transformer = new CaseColumn(\n+            $column,\n+            $this->getMode($mode),\n+            $encoding,\n+        );\n+\n+        $this->transformers->push($transformer);\n+\n+        return $this;\n     }"
        },
        {
            "title": "Ordered class elements",
            "insightClass": "PhpCsFixer\\Fixer\\ClassNotation\\OrderedClassElementsFixer",
            "file": "src/Transformers/ConditionalTransformer.php",
            "message": "@@ -23,2 +23,15 @@\n \n+    public function __invoke(Frame $frame): Frame\n+    {\n+        $this->conditionals->transform(function ($item) use ($frame): void {\n+            $diff = $item->match->diffAssoc($frame->getData());\n+\n+            if ($diff->count() === 0) {\n+                $frame->setData($frame->getData()->replace($item->replace)->toArray());\n+            }\n+        });\n+\n+        return $frame;\n+    }\n+\n     /**\n@@ -36,15 +49,2 @@\n         return $this;\n-    }\n-\n-    public function __invoke(Frame $frame): Frame\n-    {\n-        $this->conditionals->transform(function ($item) use ($frame): void {\n-            $diff = $item->match->diffAssoc($frame->getData());\n-\n-            if ($diff->count() === 0) {\n-                $frame->setData($frame->getData()->replace($item->replace)->toArray());\n-            }\n-        });\n-\n-        return $frame;\n     }",
            "diff": "@@ -23,2 +23,15 @@\n \n+    public function __invoke(Frame $frame): Frame\n+    {\n+        $this->conditionals->transform(function ($item) use ($frame): void {\n+            $diff = $item->match->diffAssoc($frame->getData());\n+\n+            if ($diff->count() === 0) {\n+                $frame->setData($frame->getData()->replace($item->replace)->toArray());\n+            }\n+        });\n+\n+        return $frame;\n+    }\n+\n     /**\n@@ -36,15 +49,2 @@\n         return $this;\n-    }\n-\n-    public function __invoke(Frame $frame): Frame\n-    {\n-        $this->conditionals->transform(function ($item) use ($frame): void {\n-            $diff = $item->match->diffAssoc($frame->getData());\n-\n-            if ($diff->count() === 0) {\n-                $frame->setData($frame->getData()->replace($item->replace)->toArray());\n-            }\n-        });\n-\n-        return $frame;\n     }"
        },
        {
            "title": "Ordered class elements",
            "insightClass": "PhpCsFixer\\Fixer\\ClassNotation\\OrderedClassElementsFixer",
            "file": "src/Transformers/DateTimeTransformer.php",
            "message": "@@ -28,16 +28,2 @@\n \n-    public function transformColumn(\n-        int|string $column,\n-        ?string $outputFormat = null,\n-        ?string $inputFormat = null\n-    ): self {\n-        $this->columns->push(new DateTimeColumn(\n-            $column,\n-            $outputFormat ?? $this->outputFormat,\n-            $inputFormat ?? $this->inputFormat,\n-        ));\n-\n-        return $this;\n-    }\n-\n     public function __invoke(Frame $frame): Frame\n@@ -55,2 +41,16 @@\n         return $frame;\n+    }\n+\n+    public function transformColumn(\n+        int|string $column,\n+        ?string $outputFormat = null,\n+        ?string $inputFormat = null\n+    ): self {\n+        $this->columns->push(new DateTimeColumn(\n+            $column,\n+            $outputFormat ?? $this->outputFormat,\n+            $inputFormat ?? $this->inputFormat,\n+        ));\n+\n+        return $this;\n     }",
            "diff": "@@ -28,16 +28,2 @@\n \n-    public function transformColumn(\n-        int|string $column,\n-        ?string $outputFormat = null,\n-        ?string $inputFormat = null\n-    ): self {\n-        $this->columns->push(new DateTimeColumn(\n-            $column,\n-            $outputFormat ?? $this->outputFormat,\n-            $inputFormat ?? $this->inputFormat,\n-        ));\n-\n-        return $this;\n-    }\n-\n     public function __invoke(Frame $frame): Frame\n@@ -55,2 +41,16 @@\n         return $frame;\n+    }\n+\n+    public function transformColumn(\n+        int|string $column,\n+        ?string $outputFormat = null,\n+        ?string $inputFormat = null\n+    ): self {\n+        $this->columns->push(new DateTimeColumn(\n+            $column,\n+            $outputFormat ?? $this->outputFormat,\n+            $inputFormat ?? $this->inputFormat,\n+        ));\n+\n+        return $this;\n     }"
        },
        {
            "title": "Ordered class elements",
            "insightClass": "PhpCsFixer\\Fixer\\ClassNotation\\OrderedClassElementsFixer",
            "file": "src/Transformers/PhoneTransformer.php",
            "message": "@@ -25,9 +25,2 @@\n \n-    public function transformColumn(int|string $column, ?int $maxlength = null): self\n-    {\n-        $this->columns->push(new PhoneColumn($column, $maxlength ?? $this->maxlength));\n-\n-        return $this;\n-    }\n-\n     public function __invoke(Frame $frame): Frame\n@@ -45,2 +38,9 @@\n         return $frame;\n+    }\n+\n+    public function transformColumn(int|string $column, ?int $maxlength = null): self\n+    {\n+        $this->columns->push(new PhoneColumn($column, $maxlength ?? $this->maxlength));\n+\n+        return $this;\n     }",
            "diff": "@@ -25,9 +25,2 @@\n \n-    public function transformColumn(int|string $column, ?int $maxlength = null): self\n-    {\n-        $this->columns->push(new PhoneColumn($column, $maxlength ?? $this->maxlength));\n-\n-        return $this;\n-    }\n-\n     public function __invoke(Frame $frame): Frame\n@@ -45,2 +38,9 @@\n         return $frame;\n+    }\n+\n+    public function transformColumn(int|string $column, ?int $maxlength = null): self\n+    {\n+        $this->columns->push(new PhoneColumn($column, $maxlength ?? $this->maxlength));\n+\n+        return $this;\n     }"
        },
        {
            "title": "Ordered class elements",
            "insightClass": "PhpCsFixer\\Fixer\\ClassNotation\\OrderedClassElementsFixer",
            "file": "src/Transformers/TrimTransformer.php",
            "message": "@@ -30,21 +30,2 @@\n \n-    public function transformColumn(string | int $column, ?string $type = null, ?string $mask = null): self\n-    {\n-        $this->columns->push(new TrimColumn($column, $type ?? $this->type, $mask ?? $this->mask));\n-\n-        return $this;\n-    }\n-\n-    /**\n-     * @param string|null $type trim|ltrim|rtrim\n-     */\n-    public function transformAllColumns(?string $type = null, ?string $mask = null): self\n-    {\n-        $this->columns->push(new TrimColumn(0, $type ?? $this->type, $mask ?? $this->mask));\n-\n-        $this->allColumns = true;\n-\n-        return $this;\n-    }\n-\n     public function __invoke(Frame $frame): Frame\n@@ -80,2 +61,21 @@\n         return $frame;\n+    }\n+\n+    public function transformColumn(string | int $column, ?string $type = null, ?string $mask = null): self\n+    {\n+        $this->columns->push(new TrimColumn($column, $type ?? $this->type, $mask ?? $this->mask));\n+\n+        return $this;\n+    }\n+\n+    /**\n+     * @param string|null $type trim|ltrim|rtrim\n+     */\n+    public function transformAllColumns(?string $type = null, ?string $mask = null): self\n+    {\n+        $this->columns->push(new TrimColumn(0, $type ?? $this->type, $mask ?? $this->mask));\n+\n+        $this->allColumns = true;\n+\n+        return $this;\n     }",
            "diff": "@@ -30,21 +30,2 @@\n \n-    public function transformColumn(string | int $column, ?string $type = null, ?string $mask = null): self\n-    {\n-        $this->columns->push(new TrimColumn($column, $type ?? $this->type, $mask ?? $this->mask));\n-\n-        return $this;\n-    }\n-\n-    /**\n-     * @param string|null $type trim|ltrim|rtrim\n-     */\n-    public function transformAllColumns(?string $type = null, ?string $mask = null): self\n-    {\n-        $this->columns->push(new TrimColumn(0, $type ?? $this->type, $mask ?? $this->mask));\n-\n-        $this->allColumns = true;\n-\n-        return $this;\n-    }\n-\n     public function __invoke(Frame $frame): Frame\n@@ -80,2 +61,21 @@\n         return $frame;\n+    }\n+\n+    public function transformColumn(string | int $column, ?string $type = null, ?string $mask = null): self\n+    {\n+        $this->columns->push(new TrimColumn($column, $type ?? $this->type, $mask ?? $this->mask));\n+\n+        return $this;\n+    }\n+\n+    /**\n+     * @param string|null $type trim|ltrim|rtrim\n+     */\n+    public function transformAllColumns(?string $type = null, ?string $mask = null): self\n+    {\n+        $this->columns->push(new TrimColumn(0, $type ?? $this->type, $mask ?? $this->mask));\n+\n+        $this->allColumns = true;\n+\n+        return $this;\n     }"
        },
        {
            "title": "Ordered class elements",
            "insightClass": "PhpCsFixer\\Fixer\\ClassNotation\\OrderedClassElementsFixer",
            "file": "src/Transformers/ZipcodeTransformer.php",
            "message": "@@ -26,2 +26,21 @@\n \n+    public function __invoke(Frame $frame): Frame\n+    {\n+        $frame->getData()->transform(function ($item, $key) {\n+            foreach ($this->columns as $column) {\n+                if ($column->column === $key) {\n+                    return $this->transformZipcode(\n+                        $item,\n+                        $column->option,\n+                        $column->maxlength\n+                    );\n+                }\n+            }\n+\n+            return $item;\n+        });\n+\n+        return $frame;\n+    }\n+\n     public function tranformColumn(int|string $column, ?string $pad = null, ?int $maxlength = null): self\n@@ -53,21 +72,2 @@\n         throw new PipesInvalidArgumentException('Invalid zipcode option!');\n-    }\n-\n-    public function __invoke(Frame $frame): Frame\n-    {\n-        $frame->getData()->transform(function ($item, $key) {\n-            foreach ($this->columns as $column) {\n-                if ($column->column === $key) {\n-                    return $this->transformZipcode(\n-                        $item,\n-                        $column->option,\n-                        $column->maxlength\n-                    );\n-                }\n-            }\n-\n-            return $item;\n-        });\n-\n-        return $frame;\n     }",
            "diff": "@@ -26,2 +26,21 @@\n \n+    public function __invoke(Frame $frame): Frame\n+    {\n+        $frame->getData()->transform(function ($item, $key) {\n+            foreach ($this->columns as $column) {\n+                if ($column->column === $key) {\n+                    return $this->transformZipcode(\n+                        $item,\n+                        $column->option,\n+                        $column->maxlength\n+                    );\n+                }\n+            }\n+\n+            return $item;\n+        });\n+\n+        return $frame;\n+    }\n+\n     public function tranformColumn(int|string $column, ?string $pad = null, ?int $maxlength = null): self\n@@ -53,21 +72,2 @@\n         throw new PipesInvalidArgumentException('Invalid zipcode option!');\n-    }\n-\n-    public function __invoke(Frame $frame): Frame\n-    {\n-        $frame->getData()->transform(function ($item, $key) {\n-            foreach ($this->columns as $column) {\n-                if ($column->column === $key) {\n-                    return $this->transformZipcode(\n-                        $item,\n-                        $column->option,\n-                        $column->maxlength\n-                    );\n-                }\n-            }\n-\n-            return $item;\n-        });\n-\n-        return $frame;\n     }"
        }
    ],
    "Security": []
}
